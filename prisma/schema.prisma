// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}


model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?      // Profile image URL
  username      String?      @unique
  password      String?
  role          String?      @default("user")
  balance       Float        @default(0)
  paymentEmail  String?
  paymentMethod String?      @default("paypal")
  // Address information
  address       String?
  city          String?
  country       String?
  zipCode       String?
  // User settings
  settings      String?      @db.Text
  isLoggedIn    Boolean?     @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  urls          Url[]
  withdrawals   Withdrawal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Url {
  id          String       @id @default(cuid())
  shortUrl    String       @unique
  originalUrl String       @db.Text
  clicks      Int          @default(0)
  earnings    Float        @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  clickEvents ClickEvent[]
}

model ClickEvent {
  id        String   @id @default(cuid())
  urlId     String
  url       Url      @relation(fields: [urlId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  referer   String?
  createdAt DateTime @default(now())
  earnings  Float    @default(0)
}

model Withdrawal {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  status        String   @default("pending") // pending, completed, rejected
  paymentMethod String
  paymentEmail  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  notes         String?  @db.Text
}
